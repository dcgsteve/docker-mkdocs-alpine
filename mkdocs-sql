#!/usr/bin/env perl
#
# Extract documentation from comments in SQL files
#

use strict;
use warnings;
use Data::Dumper;
use YAML::Tiny;
use Path::Tiny;
use Getopt::Long;

sub usage {
  print "FATAL: @_\n" if @_;
  die "Usage: mkdocs-sql <file>...\n";
}


### Main logic
my %opts;
GetOptions(\%opts, 'wiki=s', 'path=s') or usage();
usage() unless @ARGV;
get_mkdocs_config(\%opts);    ## used to validate if this is a valid wiki

my @files = collect_files(@ARGV);

for my $file (@files) {
  my $spec     = extract_docs($file);
  my $markdown = gen_markdown($spec);

  $file = { file => $file, spec => $spec, markdown => $markdown };
}

update_wiki(\%opts, @files);


##### Utilities

sub collect_files {
  my @files;
  for my $e (map { path($_) } @_) {
    if ($e->is_file) {
      push @files, $e;
      next;
    }
    elsif ($e->is_dir) {
      for my $f ($e->children) {
        push @files, $f if $f->is_file and $f->basename =~ m{^[^.].*\.sql$};
      }
    }
  }

  return sort { $a->basename cmp $b->basename } @files;
}


sub extract_docs {
  my ($file) = @_;

  open(my $fh, '<', $file) or die "Could not open file '$file', ";

  my @sections;
  my ($state, $section, $eof) = ('start', '', 0);
  my $tok = sub {
    my $l = <$fh>;
    return $l if defined $l;
    return if $eof++;
    return "";
  };

  local $_;
  while (defined($_ = $tok->())) {
    ## print "[$state][eof/$eof]: $_";

    next if m{^--};          ## Skip single line SQL comments
    next if m{\/\*.\*\/};    ## Skip single line block comments

    ## Start state: looking for the start tag of a comment block or a SQL statement
    if ($state eq 'start') {
      ## A block comment is found...
      if (m{^\s*\/\*+\s*$}) {
        $state = 'block';
        next;
      }
      ## Assume non-empty lines are SQL
      elsif (m{\S}) {
        $state = 'sql';
        redo;                ## Yes, we want to keep this line, so lets go over the state machine once again
      }
    }

    ## Block state: collect until end of block is found
    elsif ($state eq 'block') {
      ## end of block reached
      if (m{^\s*\*+\/\s*$} or $eof) {
        push @sections, [$state, $section];
        $section = '';
        $state   = 'start';
      }
      ## Keep collecting the comment
      else { $section .= $_ }
    }

    ## SQL State: either we collect the lines, or switch to block state
    elsif ($state eq 'sql') {
      ## a block comment means we are switching to a block
      if (m{^\s*\/\*+\s*$} or $eof) {
        push @sections, [$state, $section];
        $section = '';
        $state   = 'block';
      }
      ## Keep collecting the SQL
      else { $section .= $_ }
    }
  }
  close($fh);

  return \@sections;
}


sub gen_markdown {
  my $sections = shift;

  my $doc = '';
  for my $s (@$sections) {
    my $t = $s->[1];
    $t =~ s/^\s*|\s*$//g;

    $doc .= "$t\n\n" if $s->[0] eq 'block';
    $doc .= "\n```sql\n$t\n```\n\n" if $s->[0] eq 'sql';
  }

  return $doc;
}


sub get_mkdocs_config {
  my ($opts) = @_;

  usage('--wiki required') unless $opts->{wiki};
  my $root = path($opts->{wiki});

  my $cfgf = $root->child('mkdocs.yml');
  usage("directory '$opts->{wiki}' not a valid mkdocs wiki, missig mkdocs.yml")
    unless $cfgf->is_file;

  usage('--path required') unless $opts->{path};

  my $path = $root->child('docs', $opts->{path});
  usage("--path '$path' must exist") unless $path->is_dir;

  my $idx_template = $path->child('index.md');
  usage("--path '$path' lacks a index.md file") unless $idx_template->is_file;

  my $cfg = Load($cfgf->slurp);

  ## Search for the section that includes a entry
  ## that matches the idx_template
  my $section;
  my $wanted = $idx_template->relative($root->child('docs'))->stringify;
  my @queue  = ($cfg->{pages});
SEARCH: while (my $try = shift @queue) {
    next unless ref($try) eq 'ARRAY';
    for my $entry (@$try) {
      my ($name, $md_path) = %$entry;

      if (ref($md_path) eq 'ARRAY') {
        push @queue, $md_path;
        next;
      }
      elsif ($md_path eq $wanted) {
        $section = $try;
      }
      last SEARCH if $section;
    }
  }
  usage("Could not find the index in the pages wiki configuration") unless $section;

  return {
    cfg_file => $cfgf,
    cfg      => $cfg,
    section  => $section,
    path     => $path,
    idx      => $idx_template,
    base_url => $opts->{path},
  };
}


sub update_wiki {
  my $opts = shift;

  my $cfg  = get_mkdocs_config($opts);
  my $path = $cfg->{path};
  my $sect = $cfg->{section};
  my $base = $cfg->{base_url};

  my $idx = '';
  for my $e (map { $_->[1] } sort { $a->[0] cmp $b->[0] } map { [$_->{file}->basename, $_] } @_) {

    # Cleanup name
    my $name = $e->{file}->basename;
    $name =~ s/\.sql$//;
    $name =~ s/^\d+\-//;

    ## See if we can pick up a description
    my ($descr) = $e->{markdown} =~ m/^#\s*(.*?)\s*#?$/gsm;

    ## Write the md file
    $path->child("$name.md")->spew($e->{markdown});

    ## Update the index entry
    my $url = "$base/$name.md";
    $idx .= "* [$name]($url)\n";
    push @$sect, { $descr => $url };
  }

  $cfg->{idx}->edit(
    sub {
      my $b = '<!-- start of sql files -->';
      my $e = '<!-- end of sql files -->';
      s{\Q$b\E.+?\Q$e\E}{$b\n$idx$e}gsm;
    }
  );

  $cfg->{cfg_file}->spew(Dump($cfg->{cfg}));

  return;
}
